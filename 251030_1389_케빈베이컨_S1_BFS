#O(N+M)
#BFS인데 count 하는 방식 처음에는 readyq라는 큐를 만들어 이중 큐를 만들었음. 시간복잡도는 같으나 더 많은 메모리를 잡아먹음. next와 cur를 비교하는 방식으로 해결.
#for문을 arr[cur]로 돌떄 for(int next : arr[cur])라는 방식도 가능함을 알아냄


#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	int N, M;
	cin >> N >> M;

	vector<vector<int>> arr(N);

	for (int i = 0; i < M; i++) {
		int a, b;
		cin >> a >> b;
		arr[a-1].push_back(b-1);
		arr[b-1].push_back(a-1);
	}


	queue<int> q;
	queue<int> readyq;
	vector<int> result;
	result.assign(N, 0);
	for (int i = 0; i < N; i++) {
		vector<int> visit;
		visit.assign(N, 5001);
		q.push(i);
		visit[i] = 0;
		int count = 1;
		while (!q.empty()) {
			readyq = q;
			q = {};
			while (!readyq.empty()) {
				int cur = readyq.front();
				readyq.pop();
				for (int next : arr[cur]) {
					if (visit[next] > visit[cur] + 1) {
						visit[next] = visit[cur] + 1;
						q.push(next);
					}
				}
			}
			count++;
		}
		for (int j = 0; j < N; j++) {
			result[i] += visit[j];
		}
	}
	int MINresult = result[0];
	int MINresultx = 0;
	for (int i = 1; i < N; i++) {
		if (MINresult > result[i]) {
			MINresult = result[i];
			MINresultx = i;
		}
	}
	cout << MINresultx+1;

}

/*
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	int N, M;
	cin >> N >> M;

	vector<vector<int>> arr(N);

	for (int i = 0; i < M; i++) {
		int a, b;
		cin >> a >> b;
		arr[a-1].push_back(b-1);
		arr[b-1].push_back(a-1);
	}


	queue<int> q;
	queue<int> readyq;
	vector<int> result;
	result.assign(N, 0);
	for (int i = 0; i < N; i++) {
		vector<int> visit;
		visit.assign(N, 5001);
		q.push(i);
		visit[i] = 0;
		int count = 1;
		while (!q.empty()) {
			readyq = q;
			q = {};
			while (!readyq.empty()) {
				int per = readyq.front();
				readyq.pop();
				for (int j = 0; j < arr[per].size(); j++) {
					if (visit[arr[per][j]] > count) {
						visit[arr[per][j]] = count;
						q.push(arr[per][j]);
					}
				}
			}
			count++;
		}
		for (int j = 0; j < N; j++) {
			result[i] += visit[j];
		}
	}
	int MINresult = result[0];
	int MINresultx = 0;
	for (int i = 1; i < N; i++) {
		if (MINresult > result[i]) {
			MINresult = result[i];
			MINresultx = i;
		}
	}
	cout << MINresultx+1;

}
*/
